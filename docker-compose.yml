version: "3.7"
services:
    ###############################
    ####### Python examples #######
    ###############################
#    py-lstrace-client:
#        container_name: py-lstrace-client
#        build:
#            context: ./python/lstrace
#            dockerfile: Dockerfile.client
#        networks:
#            - demo
#        depends_on:
#            - py-lstrace-server
#        env_file:
#            - .env
#        environment:
#            - LS_SERVICE_NAME=py-lstrace-client
#            - LS_SERVICE_VERSION=1.2.1
#            - TARGET_URL=http://py-lstrace-server:5000
#        stop_grace_period: 1s
#    py-lstrace-server:
#        container_name: py-lstrace-server
#        build:
#            context: ./python/lstrace
#            dockerfile: Dockerfile.server
#        networks:
#            - demo
#        env_file:
#            - .env
#        environment:
#            - LS_SERVICE_NAME=py-lstrace-server
#            - LS_SERVICE_VERSION=0.2.2
#        stop_grace_period: 1s
#    py-collector-client:
#        container_name: py-collector-client
#        build:
#            context: ./python/otlp
#            dockerfile: Dockerfile.client
#        networks:
#            - demo
#        depends_on:
#            - py-collector-server
#            - otel-collector
#        env_file:
#            - .env
#        environment:
#            - INSECURE=1
#            - COLLECTOR_ENDPOINT=otel-collector:55680
#            - LS_SERVICE_NAME=py-collector-client
#            - LS_SERVICE_VERSION=1.2.9
#            - TARGET_URL=http://py-collector-server:5000
#        stop_grace_period: 1s
#    py-collector-server:
#        container_name: py-collector-server
#        build:
#            context: ./python/otlp
#            dockerfile: Dockerfile.server
#        networks:
#            - demo
#        depends_on:
#            - otel-collector
#        env_file:
#            - .env
#        environment:
#            - INSECURE=1
#            - COLLECTOR_ENDPOINT=otel-collector:55680
#            - LS_SERVICE_NAME=py-collector-server
#            - LS_SERVICE_VERSION=0.2.8
#        stop_grace_period: 1s
    py-otlp-client:
        container_name: py-otlp-client
        build:
            context: ./python/otlp
            dockerfile: Dockerfile.client
        networks:
            - demo
        depends_on:
            - py-otlp-server
        env_file:
            - .env
        environment:
            - COLLECTOR_ENDPOINT=ingest.lightstep.com:443
            - LS_SERVICE_NAME=py-otlp-client
            - LS_SERVICE_VERSION=10.10.10
            - TARGET_URL=http://py-otlp-server:5000
        stop_grace_period: 1s
    py-otlp-server:
        container_name: py-otlp-server
        build:
            context: ./python/otlp
            dockerfile: Dockerfile.server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - COLLECTOR_ENDPOINT=ingest.lightstep.com:443
            - LS_SERVICE_NAME=py-otlp-server
            - LS_SERVICE_VERSION=10.10.9
        stop_grace_period: 1s
    py-launcher-client:
        container_name: py-launcher-client
        build:
            context: ./python/launcher
            dockerfile: Dockerfile.client
        networks:
            - demo
        depends_on:
            - py-launcher-server
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-launcher-client
            - LS_SERVICE_VERSION=10.10.10
            - DESTINATION_URL=http://py-launcher-server:5000
        stop_grace_period: 1s
    py-launcher-server:
        container_name: py-launcher-server
        build:
            context: ./python/launcher
            dockerfile: Dockerfile.server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-launcher-server
            - LS_SERVICE_VERSION=10.10.9
        stop_grace_period: 1s
    demo-client-otlp:
        container_name: demo-client-otlp
        build:
            context: ./demo-client/otlp
            dockerfile: Dockerfile
        networks:
            - demo
        env_file:
            - .env
        environment:
            - DESTINATIONS=http://py-lstrace-server:5000/redis/999,http://go-launcher-server:8081/content/234,http://py-launcher-server:5000/redis/123,http://js-launcher-server:8080/ping,http://go-opentracing-server:8081/content/456,http://go-otlp-server:8081/content/345,http://java-otlp-server:8083/content,http://java-specialagent-server:8083/content,http://js-lstrace-server:8080/ping,http://py-otlp-server:5000/pymongo/123,http://py-collector-server:5000/sqlalchemy/123
            - LS_SERVICE_NAME=demo-client-otlp
            - LS_SERVICE_VERSION=0.1.1
        stop_grace_period: 1s
#    demo-client-lstrace:
#        container_name: demo-client-lstrace
#        build:
#            context: ./demo-client/lstrace
#            dockerfile: Dockerfile
#        networks:
#            - demo
#        env_file:
#            - .env
#        environment:
#            - DESTINATIONS=http://py-lstrace-server:5000/redis/999,http://go-launcher-server:8081/content/234,http://py-launcher-server:5000/redis/123,http://js-launcher-server:8080/ping,http://go-opentracing-server:8081/content/456,http://go-otlp-server:8081/content/345,http://java-otlp-server:8083/content,http://java-specialagent-server:8083/content,http://js-lstrace-server:8080/ping,http://py-otlp-server:5000/pymongo/123,http://py-collector-server:5000/sqlalchemy/123,http://dotnet-otlp-server
#            - LS_SERVICE_NAME=demo-client-lstrace
#            - LS_SERVICE_VERSION=0.2.2
#        stop_grace_period: 1s
    py-opentracing-client:
        container_name: py-opentracing-client
        build:
            context: ./python/opentracing
            dockerfile: Dockerfile.client
        networks:
            - demo
        depends_on:
            - py-opentracing-server
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-opentracing-client
            - LS_SERVICE_VERSION=10.10.10
            - DESTINATION_URL=http://py-opentracing-server:5000
        stop_grace_period: 1s
    py-opentracing-server:
        container_name: py-opentracing-server
        build:
            context: ./python/opentracing
            dockerfile: Dockerfile.server
        networks:
            - demo
        env_file:
            - .env
        environment:
            - LS_SERVICE_NAME=py-opentracing-server
            - LS_SERVICE_VERSION=10.10.9
        stop_grace_period: 1s
    ##############################
    ####### Extra services #######
    ##############################
    mongo:
        container_name: mongo
        image: mongo:latest
        networks:
            - demo
        stop_grace_period: 1s
        ports:
            - 0.0.0.0:27017:27017
    mysql:
        container_name: mysql
        image: mysql:5.7
        restart: always
        environment:
            MYSQL_USER: testuser
            MYSQL_PASSWORD: testpassword
            MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            MYSQL_DATABASE: opentelemetry-tests
        networks:
            - demo
        stop_grace_period: 1s
    postgres:
        container_name: postgres
        image: postgres:10.5-alpine
        environment:
            POSTGRES_USER: testuser
            POSTGRES_PASSWORD: testpassword
            POSTGRES_DB: opentelemetry-tests
        networks:
            - demo
        ports:
            - 0.0.0.0:5432:5432
        stop_grace_period: 1s
    redis:
        container_name: redis
        image: redis:4.0-alpine
        networks:
            - demo
        ports:
            - 0.0.0.0:6379:6379
        stop_grace_period: 1s
    otel-collector:
        container_name: otel-collector
        image: otel/opentelemetry-collector:0.6.1
        command: ["--config=/conf/collector-config.yaml", "--log-level=DEBUG"]
        networks:
            - demo
        # depends_on:
        #     - jaeger
        #     - satellite
        volumes:
            - ./collector/collector-config.yaml:/conf/collector-config.yaml
        ports:
            - "0.0.0.0:8889:8889"   # Prometheus exporter metrics
            - "0.0.0.0:55680:55680" # OTLP receiver
    # jaeger:
    #     container_name: jaeger
    #     image: jaegertracing/all-in-one:latest
    #     ports:
    #         - "0.0.0.0:16686:16686"
    #     networks:
    #         - demo
    #         # docker run -p 16686:16686 -p 14268:14268 -p 6831:6831/udp -p 14250:14250 
    #     stop_grace_period: 1s
    # optionally configure a satellite here
    # satellite:
    #     container_name: satellite
    #     image: satlocal:latest
    #     env_file:
    #         - .env
    #     networks:
    #         - demo
    #     ports:
    #         - "0.0.0.0:8360:8360"   # Satellite ingest port
    #     stop_grace_period: 1s
networks:
    demo:
